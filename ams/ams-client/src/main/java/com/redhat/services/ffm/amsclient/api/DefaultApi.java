/*
 * Account Management Service API
 * Manage user subscriptions and clusters
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.services.ffm.amsclient.api;

import com.redhat.services.ffm.amsclient.ApiClient;
import com.redhat.services.ffm.amsclient.ApiException;
import com.redhat.services.ffm.amsclient.ApiResponse;
import com.redhat.services.ffm.amsclient.Pair;

import com.redhat.services.ffm.amsclient.models.AccessReview;
import com.redhat.services.ffm.amsclient.models.AccessReviewResponse;
import com.redhat.services.ffm.amsclient.models.AccessTokenCfg;
import com.redhat.services.ffm.amsclient.models.Account;
import com.redhat.services.ffm.amsclient.models.AccountGroup;
import com.redhat.services.ffm.amsclient.models.AccountGroupAssignment;
import com.redhat.services.ffm.amsclient.models.AccountGroupAssignmentList;
import com.redhat.services.ffm.amsclient.models.AccountGroupList;
import com.redhat.services.ffm.amsclient.models.AccountGroupRequest;
import com.redhat.services.ffm.amsclient.models.AccountList;
import com.redhat.services.ffm.amsclient.models.AccountPatchRequest;
import com.redhat.services.ffm.amsclient.models.CapabilityReview;
import com.redhat.services.ffm.amsclient.models.CapabilityReviewRequest;
import com.redhat.services.ffm.amsclient.models.Certificate;
import com.redhat.services.ffm.amsclient.models.CertificatesRequest;
import com.redhat.services.ffm.amsclient.models.CloudResource;
import com.redhat.services.ffm.amsclient.models.CloudResourceList;
import com.redhat.services.ffm.amsclient.models.ClusterAuthorizationRequest;
import com.redhat.services.ffm.amsclient.models.ClusterAuthorizationResponse;
import com.redhat.services.ffm.amsclient.models.ClusterRegistrationRequest;
import com.redhat.services.ffm.amsclient.models.ClusterRegistrationResponse;
import com.redhat.services.ffm.amsclient.models.ClusterTransfer;
import com.redhat.services.ffm.amsclient.models.ClusterTransferList;
import com.redhat.services.ffm.amsclient.models.ClusterTransferPatchRequest;
import com.redhat.services.ffm.amsclient.models.ClusterTransferRequest;
import com.redhat.services.ffm.amsclient.models.DeletedSubscriptionList;
import com.redhat.services.ffm.amsclient.models.Error;
import com.redhat.services.ffm.amsclient.models.ErrorList;
import com.redhat.services.ffm.amsclient.models.ExportControlReview;
import com.redhat.services.ffm.amsclient.models.ExportControlReviewRequest;
import com.redhat.services.ffm.amsclient.models.FeatureReview;
import com.redhat.services.ffm.amsclient.models.FeatureReviewResponse;
import com.redhat.services.ffm.amsclient.models.FeatureToggle;
import com.redhat.services.ffm.amsclient.models.FeatureToggleQueryRequest;
import com.redhat.services.ffm.amsclient.models.Label;
import com.redhat.services.ffm.amsclient.models.LabelList;
import com.redhat.services.ffm.amsclient.models.MetricsList;
import com.redhat.services.ffm.amsclient.models.NotificationContactCreateRequest;
import com.redhat.services.ffm.amsclient.models.NotificationRequest;
import com.redhat.services.ffm.amsclient.models.Organization;
import com.redhat.services.ffm.amsclient.models.OrganizationList;
import com.redhat.services.ffm.amsclient.models.OrganizationPatchRequest;
import com.redhat.services.ffm.amsclient.models.Plan;
import com.redhat.services.ffm.amsclient.models.PlanList;
import com.redhat.services.ffm.amsclient.models.PullSecretRequest;
import com.redhat.services.ffm.amsclient.models.Quota;
import com.redhat.services.ffm.amsclient.models.QuotaCostList;
import com.redhat.services.ffm.amsclient.models.QuotaList;
import com.redhat.services.ffm.amsclient.models.QuotaRulesList;
import com.redhat.services.ffm.amsclient.models.Registry;
import com.redhat.services.ffm.amsclient.models.RegistryCredential;
import com.redhat.services.ffm.amsclient.models.RegistryCredentialList;
import com.redhat.services.ffm.amsclient.models.RegistryCredentialPatchRequest;
import com.redhat.services.ffm.amsclient.models.RegistryList;
import com.redhat.services.ffm.amsclient.models.ReservedResource;
import com.redhat.services.ffm.amsclient.models.ReservedResourceList;
import com.redhat.services.ffm.amsclient.models.ReservedResourcePatchRequest;
import com.redhat.services.ffm.amsclient.models.ResourceQuota;
import com.redhat.services.ffm.amsclient.models.ResourceQuotaList;
import com.redhat.services.ffm.amsclient.models.ResourceQuotaRequest;
import com.redhat.services.ffm.amsclient.models.ResourceReview;
import com.redhat.services.ffm.amsclient.models.ResourceReviewRequest;
import com.redhat.services.ffm.amsclient.models.Role;
import com.redhat.services.ffm.amsclient.models.RoleBinding;
import com.redhat.services.ffm.amsclient.models.RoleBindingCreateRequest;
import com.redhat.services.ffm.amsclient.models.RoleBindingList;
import com.redhat.services.ffm.amsclient.models.RoleBindingRequest;
import com.redhat.services.ffm.amsclient.models.RoleList;
import com.redhat.services.ffm.amsclient.models.SKU;
import com.redhat.services.ffm.amsclient.models.SelfAccessReview;
import com.redhat.services.ffm.amsclient.models.SelfEntitlementStatus;
import com.redhat.services.ffm.amsclient.models.SelfFeatureReview;
import com.redhat.services.ffm.amsclient.models.SelfResourceReview;
import com.redhat.services.ffm.amsclient.models.SelfResourceReviewRequest;
import com.redhat.services.ffm.amsclient.models.SelfServiceLandingPageSchema;
import com.redhat.services.ffm.amsclient.models.SelfTermsReview;
import com.redhat.services.ffm.amsclient.models.SkuList;
import com.redhat.services.ffm.amsclient.models.SkuRules;
import com.redhat.services.ffm.amsclient.models.SkuRulesList;
import com.redhat.services.ffm.amsclient.models.Subscription;
import com.redhat.services.ffm.amsclient.models.SubscriptionCreateRequest;
import com.redhat.services.ffm.amsclient.models.SubscriptionList;
import com.redhat.services.ffm.amsclient.models.SubscriptionMetricList;
import com.redhat.services.ffm.amsclient.models.SubscriptionPatchRequest;
import com.redhat.services.ffm.amsclient.models.SubscriptionRoleBinding;
import com.redhat.services.ffm.amsclient.models.SubscriptionRoleBindingCreateRequest;
import com.redhat.services.ffm.amsclient.models.SubscriptionRoleBindingList;
import com.redhat.services.ffm.amsclient.models.Summary;
import com.redhat.services.ffm.amsclient.models.SupportCasesCreatedResponse;
import com.redhat.services.ffm.amsclient.models.SupportCasesRequest;
import com.redhat.services.ffm.amsclient.models.TermsReview;
import com.redhat.services.ffm.amsclient.models.TermsReviewResponse;
import com.redhat.services.ffm.amsclient.models.TokenAuthorizationRequest;
import com.redhat.services.ffm.amsclient.models.TokenAuthorizationResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-21T14:46:15.841437+02:00[Europe/Prague]")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Return access token generated from registries in docker format
   * 
   * @return CompletableFuture&lt;AccessTokenCfg&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccessTokenCfg> apiAccountsMgmtV1AccessTokenPost() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccessTokenPostRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccessTokenPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessTokenCfg>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Return access token generated from registries in docker format
   * 
   * @return CompletableFuture&lt;ApiResponse&lt;AccessTokenCfg&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccessTokenCfg>> apiAccountsMgmtV1AccessTokenPostWithHttpInfo() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccessTokenPostRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccessTokenPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccessTokenCfg>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessTokenCfg>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccessTokenPostRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/access_token";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of accounts
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;AccountList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountList> apiAccountsMgmtV1AccountsGet(Integer page, Integer size, String search, String orderBy, String fields, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsGetRequestBuilder(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of accounts
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountList>> apiAccountsMgmtV1AccountsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy, String fields, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsGetRequestBuilder(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsGetRequestBuilder(Integer page, Integer size, String search, String orderBy, String fields, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get an account by id
   * 
   * @param id The id of record (required)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fetchRhit If true, includes the RHIT account_id in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Account> apiAccountsMgmtV1AccountsIdGet(String id, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchRhit) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdGetRequestBuilder(id, fetchLabels, fetchCapabilities, fetchRhit);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an account by id
   * 
   * @param id The id of record (required)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fetchRhit If true, includes the RHIT account_id in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Account&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Account>> apiAccountsMgmtV1AccountsIdGetWithHttpInfo(String id, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchRhit) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdGetRequestBuilder(id, fetchLabels, fetchCapabilities, fetchRhit);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Account>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdGetRequestBuilder(String id, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchRhit) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchRhit", fetchRhit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;LabelList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<LabelList> apiAccountsMgmtV1AccountsIdLabelsGet(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;LabelList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<LabelList>> apiAccountsMgmtV1AccountsIdLabelsGetWithHttpInfo(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<LabelList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdLabelsGetRequestBuilder(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdLabelsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1AccountsIdLabelsKeyDelete(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1AccountsIdLabelsKeyDeleteWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdLabelsKeyDelete");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1AccountsIdLabelsKeyDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1AccountsIdLabelsKeyGet(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1AccountsIdLabelsKeyGetWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdLabelsKeyGetRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdLabelsKeyGet");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1AccountsIdLabelsKeyGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1AccountsIdLabelsKeyPatch(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1AccountsIdLabelsKeyPatchWithHttpInfo(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdLabelsKeyPatchRequestBuilder(String id, String key, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdLabelsKeyPatch");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1AccountsIdLabelsKeyPatch");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1AccountsIdLabelsKeyPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1AccountsIdLabelsPost(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1AccountsIdLabelsPostWithHttpInfo(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdLabelsPostRequestBuilder(String id, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdLabelsPost");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1AccountsIdLabelsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an account
   * 
   * @param id The id of record (required)
   * @param accountPatchRequest Updated account data (required)
   * @return CompletableFuture&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Account> apiAccountsMgmtV1AccountsIdPatch(String id, AccountPatchRequest accountPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdPatchRequestBuilder(id, accountPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update an account
   * 
   * @param id The id of record (required)
   * @param accountPatchRequest Updated account data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Account&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Account>> apiAccountsMgmtV1AccountsIdPatchWithHttpInfo(String id, AccountPatchRequest accountPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsIdPatchRequestBuilder(id, accountPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Account>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsIdPatchRequestBuilder(String id, AccountPatchRequest accountPatchRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1AccountsIdPatch");
    }
    // verify the required parameter 'accountPatchRequest' is set
    if (accountPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountPatchRequest' when calling apiAccountsMgmtV1AccountsIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(accountPatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new account
   * 
   * @param account Account data (required)
   * @param dryRun If true, instructs API to avoid making any changes, but rather run through validations only. (optional)
   * @return CompletableFuture&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Account> apiAccountsMgmtV1AccountsPost(Account account, Boolean dryRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsPostRequestBuilder(account, dryRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new account
   * 
   * @param account Account data (required)
   * @param dryRun If true, instructs API to avoid making any changes, but rather run through validations only. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Account&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Account>> apiAccountsMgmtV1AccountsPostWithHttpInfo(Account account, Boolean dryRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1AccountsPostRequestBuilder(account, dryRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1AccountsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Account>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1AccountsPostRequestBuilder(Account account, Boolean dryRun) throws ApiException {
    // verify the required parameter 'account' is set
    if (account == null) {
      throw new ApiException(400, "Missing the required parameter 'account' when calling apiAccountsMgmtV1AccountsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/accounts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dryRun", dryRun));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(account);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Fetch certificates of a particular type
   * 
   * @param certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;}  (required)
   * @return CompletableFuture&lt;Certificate&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Certificate> apiAccountsMgmtV1CertificatesPost(CertificatesRequest certificatesRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CertificatesPostRequestBuilder(certificatesRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CertificatesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Certificate>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Fetch certificates of a particular type
   * 
   * @param certificatesRequest # The payload depends on the type of the requested certificate The examples for supported types: * {\&quot;type\&quot;: \&quot;sca\&quot;, \&quot;arch\&quot;: \&quot;x86_64\&quot;}  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Certificate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Certificate>> apiAccountsMgmtV1CertificatesPostWithHttpInfo(CertificatesRequest certificatesRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CertificatesPostRequestBuilder(certificatesRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CertificatesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Certificate>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Certificate>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CertificatesPostRequestBuilder(CertificatesRequest certificatesRequest) throws ApiException {
    // verify the required parameter 'certificatesRequest' is set
    if (certificatesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'certificatesRequest' when calling apiAccountsMgmtV1CertificatesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/certificates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(certificatesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of cloud resources
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;CloudResourceList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CloudResourceList> apiAccountsMgmtV1CloudResourcesGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResourceList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of cloud resources
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;CloudResourceList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CloudResourceList>> apiAccountsMgmtV1CloudResourcesGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CloudResourceList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResourceList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CloudResourcesGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cloud_resources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a cloud resource
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1CloudResourcesIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a cloud resource
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1CloudResourcesIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CloudResourcesIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1CloudResourcesIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cloud_resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a cloud resource
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;CloudResource&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CloudResource> apiAccountsMgmtV1CloudResourcesIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a cloud resource
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CloudResource&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CloudResource>> apiAccountsMgmtV1CloudResourcesIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CloudResource>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CloudResourcesIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1CloudResourcesIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cloud_resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a cloud resource
   * 
   * @param id The id of record (required)
   * @param cloudResource Updated cloud resource data (required)
   * @return CompletableFuture&lt;CloudResource&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CloudResource> apiAccountsMgmtV1CloudResourcesIdPatch(String id, CloudResource cloudResource) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdPatchRequestBuilder(id, cloudResource);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a cloud resource
   * 
   * @param id The id of record (required)
   * @param cloudResource Updated cloud resource data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CloudResource&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CloudResource>> apiAccountsMgmtV1CloudResourcesIdPatchWithHttpInfo(String id, CloudResource cloudResource) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesIdPatchRequestBuilder(id, cloudResource);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CloudResource>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CloudResourcesIdPatchRequestBuilder(String id, CloudResource cloudResource) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1CloudResourcesIdPatch");
    }
    // verify the required parameter 'cloudResource' is set
    if (cloudResource == null) {
      throw new ApiException(400, "Missing the required parameter 'cloudResource' when calling apiAccountsMgmtV1CloudResourcesIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cloud_resources/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(cloudResource);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new cloud resource
   * 
   * @param cloudResource Cloud resource data (required)
   * @return CompletableFuture&lt;CloudResource&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CloudResource> apiAccountsMgmtV1CloudResourcesPost(CloudResource cloudResource) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesPostRequestBuilder(cloudResource);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new cloud resource
   * 
   * @param cloudResource Cloud resource data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CloudResource&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CloudResource>> apiAccountsMgmtV1CloudResourcesPostWithHttpInfo(CloudResource cloudResource) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CloudResourcesPostRequestBuilder(cloudResource);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CloudResourcesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CloudResource>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudResource>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CloudResourcesPostRequestBuilder(CloudResource cloudResource) throws ApiException {
    // verify the required parameter 'cloudResource' is set
    if (cloudResource == null) {
      throw new ApiException(400, "Missing the required parameter 'cloudResource' when calling apiAccountsMgmtV1CloudResourcesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cloud_resources";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(cloudResource);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Authorizes new cluster creation against an exsiting RH Subscription.
   * 
   * @param clusterAuthorizationRequest Cluster and authorization data (required)
   * @return CompletableFuture&lt;ClusterAuthorizationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ClusterAuthorizationResponse> apiAccountsMgmtV1ClusterAuthorizationsPost(ClusterAuthorizationRequest clusterAuthorizationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterAuthorizationsPostRequestBuilder(clusterAuthorizationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterAuthorizationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterAuthorizationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Authorizes new cluster creation against an exsiting RH Subscription.
   * 
   * @param clusterAuthorizationRequest Cluster and authorization data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ClusterAuthorizationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ClusterAuthorizationResponse>> apiAccountsMgmtV1ClusterAuthorizationsPostWithHttpInfo(ClusterAuthorizationRequest clusterAuthorizationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterAuthorizationsPostRequestBuilder(clusterAuthorizationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterAuthorizationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ClusterAuthorizationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterAuthorizationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ClusterAuthorizationsPostRequestBuilder(ClusterAuthorizationRequest clusterAuthorizationRequest) throws ApiException {
    // verify the required parameter 'clusterAuthorizationRequest' is set
    if (clusterAuthorizationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterAuthorizationRequest' when calling apiAccountsMgmtV1ClusterAuthorizationsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cluster_authorizations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterAuthorizationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Finds or creates a cluster registration with a registy credential token and cluster ID
   * 
   * @param clusterRegistrationRequest Cluster and authorization data (required)
   * @return CompletableFuture&lt;ClusterRegistrationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ClusterRegistrationResponse> apiAccountsMgmtV1ClusterRegistrationsPost(ClusterRegistrationRequest clusterRegistrationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterRegistrationsPostRequestBuilder(clusterRegistrationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterRegistrationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterRegistrationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Finds or creates a cluster registration with a registy credential token and cluster ID
   * 
   * @param clusterRegistrationRequest Cluster and authorization data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ClusterRegistrationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ClusterRegistrationResponse>> apiAccountsMgmtV1ClusterRegistrationsPostWithHttpInfo(ClusterRegistrationRequest clusterRegistrationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterRegistrationsPostRequestBuilder(clusterRegistrationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterRegistrationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ClusterRegistrationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterRegistrationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ClusterRegistrationsPostRequestBuilder(ClusterRegistrationRequest clusterRegistrationRequest) throws ApiException {
    // verify the required parameter 'clusterRegistrationRequest' is set
    if (clusterRegistrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterRegistrationRequest' when calling apiAccountsMgmtV1ClusterRegistrationsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cluster_registrations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterRegistrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ClusterTransferList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ClusterTransferList> apiAccountsMgmtV1ClusterTransfersGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransferList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window.
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ClusterTransferList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ClusterTransferList>> apiAccountsMgmtV1ClusterTransfersGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ClusterTransferList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransferList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ClusterTransfersGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cluster_transfers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update specific cluster transfer
   * 
   * @param id The id of record (required)
   * @param clusterTransferPatchRequest Updated cluster transfer (required)
   * @return CompletableFuture&lt;ClusterTransfer&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ClusterTransfer> apiAccountsMgmtV1ClusterTransfersIdPatch(String id, ClusterTransferPatchRequest clusterTransferPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersIdPatchRequestBuilder(id, clusterTransferPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransfer>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update specific cluster transfer
   * 
   * @param id The id of record (required)
   * @param clusterTransferPatchRequest Updated cluster transfer (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ClusterTransfer&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ClusterTransfer>> apiAccountsMgmtV1ClusterTransfersIdPatchWithHttpInfo(String id, ClusterTransferPatchRequest clusterTransferPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersIdPatchRequestBuilder(id, clusterTransferPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ClusterTransfer>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransfer>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ClusterTransfersIdPatchRequestBuilder(String id, ClusterTransferPatchRequest clusterTransferPatchRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1ClusterTransfersIdPatch");
    }
    // verify the required parameter 'clusterTransferPatchRequest' is set
    if (clusterTransferPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterTransferPatchRequest' when calling apiAccountsMgmtV1ClusterTransfersIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cluster_transfers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterTransferPatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Initiate cluster transfer.
   * 
   * @param clusterTransferRequest The contents of the cluster transfer creation request (required)
   * @return CompletableFuture&lt;ClusterTransfer&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ClusterTransfer> apiAccountsMgmtV1ClusterTransfersPost(ClusterTransferRequest clusterTransferRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersPostRequestBuilder(clusterTransferRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransfer>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Initiate cluster transfer.
   * 
   * @param clusterTransferRequest The contents of the cluster transfer creation request (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ClusterTransfer&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ClusterTransfer>> apiAccountsMgmtV1ClusterTransfersPostWithHttpInfo(ClusterTransferRequest clusterTransferRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ClusterTransfersPostRequestBuilder(clusterTransferRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ClusterTransfersPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ClusterTransfer>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ClusterTransfer>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ClusterTransfersPostRequestBuilder(ClusterTransferRequest clusterTransferRequest) throws ApiException {
    // verify the required parameter 'clusterTransferRequest' is set
    if (clusterTransferRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'clusterTransferRequest' when calling apiAccountsMgmtV1ClusterTransfersPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/cluster_transfers";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(clusterTransferRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of skus
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;SkuList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SkuList> apiAccountsMgmtV1ConfigSkusGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of skus
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SkuList>> apiAccountsMgmtV1ConfigSkusGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ConfigSkusGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/config/skus";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a sku
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1ConfigSkusIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a sku
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1ConfigSkusIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ConfigSkusIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1ConfigSkusIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/config/skus/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a sku
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;SKU&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SKU> apiAccountsMgmtV1ConfigSkusIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a sku
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SKU&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SKU>> apiAccountsMgmtV1ConfigSkusIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SKU>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ConfigSkusIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1ConfigSkusIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/config/skus/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Sku
   * 
   * @param id The id of record (required)
   * @param SKU Updated sku data (required)
   * @return CompletableFuture&lt;SKU&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SKU> apiAccountsMgmtV1ConfigSkusIdPatch(String id, SKU SKU) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdPatchRequestBuilder(id, SKU);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a Sku
   * 
   * @param id The id of record (required)
   * @param SKU Updated sku data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SKU&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SKU>> apiAccountsMgmtV1ConfigSkusIdPatchWithHttpInfo(String id, SKU SKU) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusIdPatchRequestBuilder(id, SKU);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SKU>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ConfigSkusIdPatchRequestBuilder(String id, SKU SKU) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1ConfigSkusIdPatch");
    }
    // verify the required parameter 'SKU' is set
    if (SKU == null) {
      throw new ApiException(400, "Missing the required parameter 'SKU' when calling apiAccountsMgmtV1ConfigSkusIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/config/skus/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(SKU);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new sku
   * 
   * @param SKU Sku data (required)
   * @return CompletableFuture&lt;SKU&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SKU> apiAccountsMgmtV1ConfigSkusPost(SKU SKU) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusPostRequestBuilder(SKU);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new sku
   * 
   * @param SKU Sku data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SKU&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SKU>> apiAccountsMgmtV1ConfigSkusPostWithHttpInfo(SKU SKU) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ConfigSkusPostRequestBuilder(SKU);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ConfigSkusPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SKU>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ConfigSkusPostRequestBuilder(SKU SKU) throws ApiException {
    // verify the required parameter 'SKU' is set
    if (SKU == null) {
      throw new ApiException(400, "Missing the required parameter 'SKU' when calling apiAccountsMgmtV1ConfigSkusPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/config/skus";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(SKU);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the authenticated account
   * 
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Account> apiAccountsMgmtV1CurrentAccountGet(Boolean fetchLabels) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CurrentAccountGetRequestBuilder(fetchLabels);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CurrentAccountGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get the authenticated account
   * 
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Account&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Account>> apiAccountsMgmtV1CurrentAccountGetWithHttpInfo(Boolean fetchLabels) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1CurrentAccountGetRequestBuilder(fetchLabels);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1CurrentAccountGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Account>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1CurrentAccountGetRequestBuilder(Boolean fetchLabels) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/current_account";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of deleted subscriptions
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;DeletedSubscriptionList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<DeletedSubscriptionList> apiAccountsMgmtV1DeletedSubscriptionsGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1DeletedSubscriptionsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1DeletedSubscriptionsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeletedSubscriptionList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of deleted subscriptions
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;DeletedSubscriptionList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<DeletedSubscriptionList>> apiAccountsMgmtV1DeletedSubscriptionsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1DeletedSubscriptionsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1DeletedSubscriptionsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<DeletedSubscriptionList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DeletedSubscriptionList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1DeletedSubscriptionsGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/deleted_subscriptions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of errors
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ErrorList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ErrorList> apiAccountsMgmtV1ErrorsGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ErrorsGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ErrorsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ErrorList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of errors
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ErrorList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ErrorList>> apiAccountsMgmtV1ErrorsGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ErrorsGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ErrorsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ErrorList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ErrorList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ErrorsGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/errors";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get an error by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Error&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Error> apiAccountsMgmtV1ErrorsIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ErrorsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ErrorsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Error>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an error by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Error&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Error>> apiAccountsMgmtV1ErrorsIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ErrorsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ErrorsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Error>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Error>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ErrorsIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1ErrorsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/errors/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Query a feature toggle by id
   * 
   * @param id The id of record (required)
   * @param featureToggleQueryRequest The context of the query (required)
   * @return CompletableFuture&lt;FeatureToggle&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<FeatureToggle> apiAccountsMgmtV1FeatureTogglesIdQueryPost(String id, FeatureToggleQueryRequest featureToggleQueryRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1FeatureTogglesIdQueryPostRequestBuilder(id, featureToggleQueryRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1FeatureTogglesIdQueryPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureToggle>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Query a feature toggle by id
   * 
   * @param id The id of record (required)
   * @param featureToggleQueryRequest The context of the query (required)
   * @return CompletableFuture&lt;ApiResponse&lt;FeatureToggle&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ApiResponse<FeatureToggle>> apiAccountsMgmtV1FeatureTogglesIdQueryPostWithHttpInfo(String id, FeatureToggleQueryRequest featureToggleQueryRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1FeatureTogglesIdQueryPostRequestBuilder(id, featureToggleQueryRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1FeatureTogglesIdQueryPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<FeatureToggle>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureToggle>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1FeatureTogglesIdQueryPostRequestBuilder(String id, FeatureToggleQueryRequest featureToggleQueryRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1FeatureTogglesIdQueryPost");
    }
    // verify the required parameter 'featureToggleQueryRequest' is set
    if (featureToggleQueryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'featureToggleQueryRequest' when calling apiAccountsMgmtV1FeatureTogglesIdQueryPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/feature_toggles/{id}/query"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(featureToggleQueryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of labels
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;LabelList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<LabelList> apiAccountsMgmtV1LabelsGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1LabelsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1LabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of labels
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;LabelList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<LabelList>> apiAccountsMgmtV1LabelsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1LabelsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1LabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<LabelList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1LabelsGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/labels";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a console.redhat.com landing page content JSON schema
   * 
   * @return CompletableFuture&lt;SelfServiceLandingPageSchema&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SelfServiceLandingPageSchema> apiAccountsMgmtV1LandingPageSelfServiceGet() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1LandingPageSelfServiceGetRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1LandingPageSelfServiceGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfServiceLandingPageSchema>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a console.redhat.com landing page content JSON schema
   * 
   * @return CompletableFuture&lt;ApiResponse&lt;SelfServiceLandingPageSchema&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SelfServiceLandingPageSchema>> apiAccountsMgmtV1LandingPageSelfServiceGetWithHttpInfo() throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1LandingPageSelfServiceGetRequestBuilder();
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1LandingPageSelfServiceGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SelfServiceLandingPageSchema>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfServiceLandingPageSchema>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1LandingPageSelfServiceGetRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/landing_page/self_service";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of metrics
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;MetricsList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<MetricsList> apiAccountsMgmtV1MetricsGet(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1MetricsGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1MetricsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetricsList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of metrics
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;MetricsList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<MetricsList>> apiAccountsMgmtV1MetricsGetWithHttpInfo(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1MetricsGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1MetricsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<MetricsList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MetricsList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1MetricsGetRequestBuilder(String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/metrics";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Notify the owner of cluster/subscription
   * 
   * @param notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1NotifyPost(NotificationRequest notificationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1NotifyPostRequestBuilder(notificationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1NotifyPost", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Notify the owner of cluster/subscription
   * 
   * @param notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1NotifyPostWithHttpInfo(NotificationRequest notificationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1NotifyPostRequestBuilder(notificationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1NotifyPost", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1NotifyPostRequestBuilder(NotificationRequest notificationRequest) throws ApiException {
    // verify the required parameter 'notificationRequest' is set
    if (notificationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'notificationRequest' when calling apiAccountsMgmtV1NotifyPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/notify";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(notificationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of organizations
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;OrganizationList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<OrganizationList> apiAccountsMgmtV1OrganizationsGet(Integer page, Integer size, String search, String orderBy, Boolean fetchLabels, Boolean fetchCapabilities, String fields) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsGetRequestBuilder(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OrganizationList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of organizations
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;OrganizationList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<OrganizationList>> apiAccountsMgmtV1OrganizationsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy, Boolean fetchLabels, Boolean fetchCapabilities, String fields) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsGetRequestBuilder(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<OrganizationList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OrganizationList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsGetRequestBuilder(Integer page, Integer size, String search, String orderBy, Boolean fetchLabels, Boolean fetchCapabilities, String fields) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get an organization by id
   * 
   * @param id The id of record (required)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;Organization&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Organization> apiAccountsMgmtV1OrganizationsIdGet(String id, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdGetRequestBuilder(id, fetchLabels, fetchCapabilities);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an organization by id
   * 
   * @param id The id of record (required)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Organization&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Organization>> apiAccountsMgmtV1OrganizationsIdGetWithHttpInfo(String id, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdGetRequestBuilder(id, fetchLabels, fetchCapabilities);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Organization>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdGetRequestBuilder(String id, Boolean fetchLabels, Boolean fetchCapabilities) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;LabelList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<LabelList> apiAccountsMgmtV1OrganizationsIdLabelsGet(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;LabelList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<LabelList>> apiAccountsMgmtV1OrganizationsIdLabelsGetWithHttpInfo(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<LabelList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdLabelsGetRequestBuilder(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdLabelsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1OrganizationsIdLabelsKeyGetWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyGet");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1OrganizationsIdLabelsKeyPatchWithHttpInfo(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequestBuilder(String id, String key, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1OrganizationsIdLabelsPost(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1OrganizationsIdLabelsPostWithHttpInfo(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdLabelsPostRequestBuilder(String id, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdLabelsPost");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1OrganizationsIdLabelsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an organization
   * 
   * @param id The id of record (required)
   * @param organizationPatchRequest Updated organization data (required)
   * @return CompletableFuture&lt;Organization&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Organization> apiAccountsMgmtV1OrganizationsIdPatch(String id, OrganizationPatchRequest organizationPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdPatchRequestBuilder(id, organizationPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update an organization
   * 
   * @param id The id of record (required)
   * @param organizationPatchRequest Updated organization data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Organization&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Organization>> apiAccountsMgmtV1OrganizationsIdPatchWithHttpInfo(String id, OrganizationPatchRequest organizationPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdPatchRequestBuilder(id, organizationPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Organization>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdPatchRequestBuilder(String id, OrganizationPatchRequest organizationPatchRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdPatch");
    }
    // verify the required parameter 'organizationPatchRequest' is set
    if (organizationPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationPatchRequest' when calling apiAccountsMgmtV1OrganizationsIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(organizationPatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a summary of organizations clusters based on metrics
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Summary&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Summary> apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Summary>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a summary of organizations clusters based on metrics
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Summary&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Summary>> apiAccountsMgmtV1OrganizationsIdSummaryDashboardGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Summary>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Summary>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an account group assignment
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpAsgnId The id of account group assignment (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(String orgId, String acctGrpAsgnId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDeleteRequestBuilder(orgId, acctGrpAsgnId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete an account group assignment
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpAsgnId The id of account group assignment (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDeleteWithHttpInfo(String orgId, String acctGrpAsgnId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDeleteRequestBuilder(orgId, acctGrpAsgnId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDeleteRequestBuilder(String orgId, String acctGrpAsgnId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete");
    }
    // verify the required parameter 'acctGrpAsgnId' is set
    if (acctGrpAsgnId == null) {
      throw new ApiException(400, "Missing the required parameter 'acctGrpAsgnId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{acctGrpAsgnId}", ApiClient.urlEncode(acctGrpAsgnId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get account group assignment by id
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpAsgnId The id of account group assignment (required)
   * @return CompletableFuture&lt;AccountGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroupAssignment> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(String orgId, String acctGrpAsgnId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGetRequestBuilder(orgId, acctGrpAsgnId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignment>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get account group assignment by id
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpAsgnId The id of account group assignment (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroupAssignment&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroupAssignment>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGetWithHttpInfo(String orgId, String acctGrpAsgnId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGetRequestBuilder(orgId, acctGrpAsgnId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroupAssignment>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignment>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGetRequestBuilder(String orgId, String acctGrpAsgnId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet");
    }
    // verify the required parameter 'acctGrpAsgnId' is set
    if (acctGrpAsgnId == null) {
      throw new ApiException(400, "Missing the required parameter 'acctGrpAsgnId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{acctGrpAsgnId}", ApiClient.urlEncode(acctGrpAsgnId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of account group assignments for the given org
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;AccountGroupAssignmentList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroupAssignmentList> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignmentList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of account group assignments for the given org
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroupAssignmentList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroupAssignmentList>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGetWithHttpInfo(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroupAssignmentList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignmentList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGetRequestBuilder(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new AccountGroupAssignment
   * 
   * @param orgId The id of organization (required)
   * @param accountGroupAssignment New AccountGroup data (required)
   * @return CompletableFuture&lt;AccountGroupAssignment&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroupAssignment> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(String orgId, AccountGroupAssignment accountGroupAssignment) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPostRequestBuilder(orgId, accountGroupAssignment);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignment>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new AccountGroupAssignment
   * 
   * @param orgId The id of organization (required)
   * @param accountGroupAssignment New AccountGroup data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroupAssignment&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroupAssignment>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPostWithHttpInfo(String orgId, AccountGroupAssignment accountGroupAssignment) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPostRequestBuilder(orgId, accountGroupAssignment);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroupAssignment>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupAssignment>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPostRequestBuilder(String orgId, AccountGroupAssignment accountGroupAssignment) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost");
    }
    // verify the required parameter 'accountGroupAssignment' is set
    if (accountGroupAssignment == null) {
      throw new ApiException(400, "Missing the required parameter 'accountGroupAssignment' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(accountGroupAssignment);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an account group
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(String orgId, String acctGrpId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDeleteRequestBuilder(orgId, acctGrpId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete an account group
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDeleteWithHttpInfo(String orgId, String acctGrpId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDeleteRequestBuilder(orgId, acctGrpId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDeleteRequestBuilder(String orgId, String acctGrpId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete");
    }
    // verify the required parameter 'acctGrpId' is set
    if (acctGrpId == null) {
      throw new ApiException(400, "Missing the required parameter 'acctGrpId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{acctGrpId}", ApiClient.urlEncode(acctGrpId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get account group by id
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @return CompletableFuture&lt;AccountGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroup> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(String orgId, String acctGrpId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGetRequestBuilder(orgId, acctGrpId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get account group by id
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroup&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroup>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGetWithHttpInfo(String orgId, String acctGrpId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGetRequestBuilder(orgId, acctGrpId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroup>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGetRequestBuilder(String orgId, String acctGrpId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet");
    }
    // verify the required parameter 'acctGrpId' is set
    if (acctGrpId == null) {
      throw new ApiException(400, "Missing the required parameter 'acctGrpId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{acctGrpId}", ApiClient.urlEncode(acctGrpId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an account group
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @param accountGroupRequest Updated account group data (required)
   * @return CompletableFuture&lt;AccountGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroup> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(String orgId, String acctGrpId, AccountGroupRequest accountGroupRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatchRequestBuilder(orgId, acctGrpId, accountGroupRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update an account group
   * 
   * @param orgId The id of organization (required)
   * @param acctGrpId The id of account group (required)
   * @param accountGroupRequest Updated account group data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroup&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroup>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatchWithHttpInfo(String orgId, String acctGrpId, AccountGroupRequest accountGroupRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatchRequestBuilder(orgId, acctGrpId, accountGroupRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroup>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatchRequestBuilder(String orgId, String acctGrpId, AccountGroupRequest accountGroupRequest) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch");
    }
    // verify the required parameter 'acctGrpId' is set
    if (acctGrpId == null) {
      throw new ApiException(400, "Missing the required parameter 'acctGrpId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch");
    }
    // verify the required parameter 'accountGroupRequest' is set
    if (accountGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountGroupRequest' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{acctGrpId}", ApiClient.urlEncode(acctGrpId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(accountGroupRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of account groups for the given org
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;AccountGroupList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroupList> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of account groups for the given org
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroupList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroupList>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGetWithHttpInfo(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroupList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroupList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGetRequestBuilder(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new AccountGroup
   * 
   * @param orgId The id of organization (required)
   * @param accountGroupRequest New AccountGroup data (required)
   * @return CompletableFuture&lt;AccountGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountGroup> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(String orgId, AccountGroupRequest accountGroupRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPostRequestBuilder(orgId, accountGroupRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new AccountGroup
   * 
   * @param orgId The id of organization (required)
   * @param accountGroupRequest New AccountGroup data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountGroup&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountGroup>> apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPostWithHttpInfo(String orgId, AccountGroupRequest accountGroupRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPostRequestBuilder(orgId, accountGroupRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountGroup>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountGroup>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPostRequestBuilder(String orgId, AccountGroupRequest accountGroupRequest) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost");
    }
    // verify the required parameter 'accountGroupRequest' is set
    if (accountGroupRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountGroupRequest' when calling apiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(accountGroupRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a summary of quota cost
   * 
   * @param orgId The id of organization (required)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchRelatedResources If true, includes the related resources in the output. Could slow request response time. (optional)
   * @param forceRecalc If true, includes that ConsumedQuota should be recalculated. (optional)
   * @return CompletableFuture&lt;QuotaCostList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<QuotaCostList> apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(String orgId, String search, Boolean fetchRelatedResources, Boolean forceRecalc) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequestBuilder(orgId, search, fetchRelatedResources, forceRecalc);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaCostList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a summary of quota cost
   * 
   * @param orgId The id of organization (required)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchRelatedResources If true, includes the related resources in the output. Could slow request response time. (optional)
   * @param forceRecalc If true, includes that ConsumedQuota should be recalculated. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;QuotaCostList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<QuotaCostList>> apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetWithHttpInfo(String orgId, String search, Boolean fetchRelatedResources, Boolean forceRecalc) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequestBuilder(orgId, search, fetchRelatedResources, forceRecalc);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<QuotaCostList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaCostList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequestBuilder(String orgId, String search, Boolean fetchRelatedResources, Boolean forceRecalc) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchRelatedResources", fetchRelatedResources));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("forceRecalc", forceRecalc));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of resource quota objects
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ResourceQuotaList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResourceQuotaList> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuotaList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of resource quota objects
   * 
   * @param orgId The id of organization (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceQuotaList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ResourceQuotaList>> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetWithHttpInfo(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequestBuilder(orgId, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceQuotaList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuotaList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequestBuilder(String orgId, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new resource quota
   * 
   * @param orgId The id of organization (required)
   * @param resourceQuotaRequest Resource quota data (required)
   * @return CompletableFuture&lt;ResourceQuota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResourceQuota> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(String orgId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequestBuilder(orgId, resourceQuotaRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new resource quota
   * 
   * @param orgId The id of organization (required)
   * @param resourceQuotaRequest Resource quota data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceQuota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ResourceQuota>> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostWithHttpInfo(String orgId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequestBuilder(orgId, resourceQuotaRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceQuota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequestBuilder(String orgId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost");
    }
    // verify the required parameter 'resourceQuotaRequest' is set
    if (resourceQuotaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceQuotaRequest' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resourceQuotaRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a resource quota
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(String orgId, String quotaId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequestBuilder(orgId, quotaId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a resource quota
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteWithHttpInfo(String orgId, String quotaId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequestBuilder(orgId, quotaId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequestBuilder(String orgId, String quotaId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete");
    }
    // verify the required parameter 'quotaId' is set
    if (quotaId == null) {
      throw new ApiException(400, "Missing the required parameter 'quotaId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{quotaId}", ApiClient.urlEncode(quotaId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a resource quota by id
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @return CompletableFuture&lt;ResourceQuota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResourceQuota> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(String orgId, String quotaId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequestBuilder(orgId, quotaId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a resource quota by id
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceQuota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ResourceQuota>> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetWithHttpInfo(String orgId, String quotaId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequestBuilder(orgId, quotaId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceQuota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequestBuilder(String orgId, String quotaId) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet");
    }
    // verify the required parameter 'quotaId' is set
    if (quotaId == null) {
      throw new ApiException(400, "Missing the required parameter 'quotaId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{quotaId}", ApiClient.urlEncode(quotaId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a resource quota
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @param resourceQuotaRequest Updated resource quota data (required)
   * @return CompletableFuture&lt;ResourceQuota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResourceQuota> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(String orgId, String quotaId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequestBuilder(orgId, quotaId, resourceQuotaRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a resource quota
   * 
   * @param orgId The id of organization (required)
   * @param quotaId The id of quota (required)
   * @param resourceQuotaRequest Updated resource quota data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceQuota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ResourceQuota>> apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchWithHttpInfo(String orgId, String quotaId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequestBuilder(orgId, quotaId, resourceQuotaRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceQuota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequestBuilder(String orgId, String quotaId, ResourceQuotaRequest resourceQuotaRequest) throws ApiException {
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      throw new ApiException(400, "Missing the required parameter 'orgId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch");
    }
    // verify the required parameter 'quotaId' is set
    if (quotaId == null) {
      throw new ApiException(400, "Missing the required parameter 'quotaId' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch");
    }
    // verify the required parameter 'resourceQuotaRequest' is set
    if (resourceQuotaRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceQuotaRequest' when calling apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}"
        .replace("{orgId}", ApiClient.urlEncode(orgId.toString()))
        .replace("{quotaId}", ApiClient.urlEncode(quotaId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resourceQuotaRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new organization
   * 
   * @param organization Organization data (required)
   * @return CompletableFuture&lt;Organization&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Organization> apiAccountsMgmtV1OrganizationsPost(Organization organization) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsPostRequestBuilder(organization);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new organization
   * 
   * @param organization Organization data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Organization&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Organization>> apiAccountsMgmtV1OrganizationsPostWithHttpInfo(Organization organization) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1OrganizationsPostRequestBuilder(organization);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1OrganizationsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Organization>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Organization>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1OrganizationsPostRequestBuilder(Organization organization) throws ApiException {
    // verify the required parameter 'organization' is set
    if (organization == null) {
      throw new ApiException(400, "Missing the required parameter 'organization' when calling apiAccountsMgmtV1OrganizationsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/organizations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(organization);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all plans
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;PlanList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<PlanList> apiAccountsMgmtV1PlansGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PlansGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PlansGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PlanList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get all plans
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;PlanList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<PlanList>> apiAccountsMgmtV1PlansGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PlansGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PlansGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<PlanList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PlanList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1PlansGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/plans";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a plan by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Plan&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Plan> apiAccountsMgmtV1PlansIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PlansIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PlansIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Plan>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a plan by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Plan&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Plan>> apiAccountsMgmtV1PlansIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PlansIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PlansIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Plan>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Plan>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1PlansIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1PlansIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/plans/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a pull secret
   * 
   * @param externalResourceId The external resource id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(String externalResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequestBuilder(externalResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PullSecretsExternalResourceIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a pull secret
   * 
   * @param externalResourceId The external resource id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1PullSecretsExternalResourceIdDeleteWithHttpInfo(String externalResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequestBuilder(externalResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PullSecretsExternalResourceIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequestBuilder(String externalResourceId) throws ApiException {
    // verify the required parameter 'externalResourceId' is set
    if (externalResourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'externalResourceId' when calling apiAccountsMgmtV1PullSecretsExternalResourceIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}"
        .replace("{externalResourceId}", ApiClient.urlEncode(externalResourceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Return access token generated from registries in docker format
   * 
   * @param pullSecretRequest Identifier of the resource in the external service that this pull secret relates to (required)
   * @return CompletableFuture&lt;AccessTokenCfg&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccessTokenCfg> apiAccountsMgmtV1PullSecretsPost(PullSecretRequest pullSecretRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PullSecretsPostRequestBuilder(pullSecretRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PullSecretsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessTokenCfg>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Return access token generated from registries in docker format
   * 
   * @param pullSecretRequest Identifier of the resource in the external service that this pull secret relates to (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccessTokenCfg&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccessTokenCfg>> apiAccountsMgmtV1PullSecretsPostWithHttpInfo(PullSecretRequest pullSecretRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1PullSecretsPostRequestBuilder(pullSecretRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1PullSecretsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccessTokenCfg>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessTokenCfg>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1PullSecretsPostRequestBuilder(PullSecretRequest pullSecretRequest) throws ApiException {
    // verify the required parameter 'pullSecretRequest' is set
    if (pullSecretRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'pullSecretRequest' when calling apiAccountsMgmtV1PullSecretsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/pull_secrets";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(pullSecretRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a summary of quota cost for the authenticated user
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchRelatedResources If true, includes the related resources in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;QuotaCostList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<QuotaCostList> apiAccountsMgmtV1QuotaCostGet(String search, Boolean fetchRelatedResources) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotaCostGetRequestBuilder(search, fetchRelatedResources);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotaCostGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaCostList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a summary of quota cost for the authenticated user
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchRelatedResources If true, includes the related resources in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;QuotaCostList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<QuotaCostList>> apiAccountsMgmtV1QuotaCostGetWithHttpInfo(String search, Boolean fetchRelatedResources) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotaCostGetRequestBuilder(search, fetchRelatedResources);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotaCostGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<QuotaCostList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaCostList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotaCostGetRequestBuilder(String search, Boolean fetchRelatedResources) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quota_cost";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchRelatedResources", fetchRelatedResources));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of UHC product Quota Rules
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;QuotaRulesList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<QuotaRulesList> apiAccountsMgmtV1QuotaRulesGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotaRulesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotaRulesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaRulesList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of UHC product Quota Rules
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;QuotaRulesList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<QuotaRulesList>> apiAccountsMgmtV1QuotaRulesGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotaRulesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotaRulesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<QuotaRulesList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaRulesList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotaRulesGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quota_rules";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of quotas
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;QuotaList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<QuotaList> apiAccountsMgmtV1QuotasGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of quotas
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;QuotaList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<QuotaList>> apiAccountsMgmtV1QuotasGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<QuotaList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<QuotaList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotasGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quotas";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a quota
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1QuotasIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a quota
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1QuotasIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotasIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1QuotasIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quotas/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a quota
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Quota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Quota> apiAccountsMgmtV1QuotasIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a quota
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Quota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Quota>> apiAccountsMgmtV1QuotasIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Quota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotasIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1QuotasIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quotas/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a quota
   * 
   * @param id The id of record (required)
   * @param quota Updated quota data (required)
   * @return CompletableFuture&lt;Quota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Quota> apiAccountsMgmtV1QuotasIdPatch(String id, Quota quota) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdPatchRequestBuilder(id, quota);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a quota
   * 
   * @param id The id of record (required)
   * @param quota Updated quota data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Quota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Quota>> apiAccountsMgmtV1QuotasIdPatchWithHttpInfo(String id, Quota quota) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasIdPatchRequestBuilder(id, quota);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Quota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotasIdPatchRequestBuilder(String id, Quota quota) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1QuotasIdPatch");
    }
    // verify the required parameter 'quota' is set
    if (quota == null) {
      throw new ApiException(400, "Missing the required parameter 'quota' when calling apiAccountsMgmtV1QuotasIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quotas/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(quota);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new quota
   * 
   * @param quota Quota data (required)
   * @return CompletableFuture&lt;Quota&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Quota> apiAccountsMgmtV1QuotasPost(Quota quota) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasPostRequestBuilder(quota);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new quota
   * 
   * @param quota Quota data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Quota&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Quota>> apiAccountsMgmtV1QuotasPostWithHttpInfo(Quota quota) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1QuotasPostRequestBuilder(quota);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1QuotasPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Quota>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Quota>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1QuotasPostRequestBuilder(Quota quota) throws ApiException {
    // verify the required parameter 'quota' is set
    if (quota == null) {
      throw new ApiException(400, "Missing the required parameter 'quota' when calling apiAccountsMgmtV1QuotasPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/quotas";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(quota);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of registries
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;RegistryList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RegistryList> apiAccountsMgmtV1RegistriesGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistriesGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistriesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of registries
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RegistryList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RegistryList>> apiAccountsMgmtV1RegistriesGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistriesGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistriesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RegistryList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistriesGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registries";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get an registry by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Registry&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Registry> apiAccountsMgmtV1RegistriesIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistriesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistriesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Registry>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an registry by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Registry&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Registry>> apiAccountsMgmtV1RegistriesIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistriesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistriesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Registry>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Registry>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistriesIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RegistriesIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registries/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List Registry Credentials
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;RegistryCredentialList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RegistryCredentialList> apiAccountsMgmtV1RegistryCredentialsGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredentialList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * 
   * List Registry Credentials
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RegistryCredentialList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RegistryCredentialList>> apiAccountsMgmtV1RegistryCredentialsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RegistryCredentialList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredentialList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistryCredentialsGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registry_credentials";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a registry credential by id
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1RegistryCredentialsIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a registry credential by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1RegistryCredentialsIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistryCredentialsIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RegistryCredentialsIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registry_credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a registry credentials by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;RegistryCredential&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RegistryCredential> apiAccountsMgmtV1RegistryCredentialsIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a registry credentials by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RegistryCredential&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RegistryCredential>> apiAccountsMgmtV1RegistryCredentialsIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RegistryCredential>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistryCredentialsIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RegistryCredentialsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registry_credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a registry credential
   * 
   * @param id The id of record (required)
   * @param registryCredentialPatchRequest Updated registry credential data (required)
   * @return CompletableFuture&lt;RegistryCredential&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RegistryCredential> apiAccountsMgmtV1RegistryCredentialsIdPatch(String id, RegistryCredentialPatchRequest registryCredentialPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdPatchRequestBuilder(id, registryCredentialPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a registry credential
   * 
   * @param id The id of record (required)
   * @param registryCredentialPatchRequest Updated registry credential data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RegistryCredential&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RegistryCredential>> apiAccountsMgmtV1RegistryCredentialsIdPatchWithHttpInfo(String id, RegistryCredentialPatchRequest registryCredentialPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsIdPatchRequestBuilder(id, registryCredentialPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RegistryCredential>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistryCredentialsIdPatchRequestBuilder(String id, RegistryCredentialPatchRequest registryCredentialPatchRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RegistryCredentialsIdPatch");
    }
    // verify the required parameter 'registryCredentialPatchRequest' is set
    if (registryCredentialPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'registryCredentialPatchRequest' when calling apiAccountsMgmtV1RegistryCredentialsIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registry_credentials/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(registryCredentialPatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Request the creation of a registry credential
   * 
   * @param registryCredential Registry credential data (required)
   * @return CompletableFuture&lt;RegistryCredential&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RegistryCredential> apiAccountsMgmtV1RegistryCredentialsPost(RegistryCredential registryCredential) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsPostRequestBuilder(registryCredential);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Request the creation of a registry credential
   * 
   * @param registryCredential Registry credential data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RegistryCredential&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RegistryCredential>> apiAccountsMgmtV1RegistryCredentialsPostWithHttpInfo(RegistryCredential registryCredential) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RegistryCredentialsPostRequestBuilder(registryCredential);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RegistryCredentialsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RegistryCredential>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegistryCredential>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RegistryCredentialsPostRequestBuilder(RegistryCredential registryCredential) throws ApiException {
    // verify the required parameter 'registryCredential' is set
    if (registryCredential == null) {
      throw new ApiException(400, "Missing the required parameter 'registryCredential' when calling apiAccountsMgmtV1RegistryCredentialsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/registry_credentials";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(registryCredential);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of reserved resources
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ReservedResourceList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ReservedResourceList> apiAccountsMgmtV1ReservedResourcesGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ReservedResourcesGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ReservedResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResourceList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of reserved resources
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ReservedResourceList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ReservedResourceList>> apiAccountsMgmtV1ReservedResourcesGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ReservedResourcesGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ReservedResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ReservedResourceList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResourceList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ReservedResourcesGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/reserved_resources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of resource quota objects
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ResourceQuotaList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResourceQuotaList> apiAccountsMgmtV1ResourceQuotaGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ResourceQuotaGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ResourceQuotaGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuotaList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of resource quota objects
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceQuotaList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ResourceQuotaList>> apiAccountsMgmtV1ResourceQuotaGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1ResourceQuotaGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1ResourceQuotaGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceQuotaList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceQuotaList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1ResourceQuotaGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/resource_quota";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of role bindings
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;RoleBindingList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RoleBindingList> apiAccountsMgmtV1RoleBindingsGet(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBindingList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of role bindings
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RoleBindingList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RoleBindingList>> apiAccountsMgmtV1RoleBindingsGetWithHttpInfo(Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsGetRequestBuilder(page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RoleBindingList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBindingList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RoleBindingsGetRequestBuilder(Integer page, Integer size, String search, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/role_bindings";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a role binding
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1RoleBindingsIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a role binding
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1RoleBindingsIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RoleBindingsIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RoleBindingsIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/role_bindings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a role binding
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;RoleBinding&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RoleBinding> apiAccountsMgmtV1RoleBindingsIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a role binding
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RoleBinding&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RoleBinding>> apiAccountsMgmtV1RoleBindingsIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RoleBinding>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RoleBindingsIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RoleBindingsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/role_bindings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a role binding
   * 
   * @param id The id of record (required)
   * @param roleBindingRequest Updated role binding data (required)
   * @return CompletableFuture&lt;RoleBinding&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RoleBinding> apiAccountsMgmtV1RoleBindingsIdPatch(String id, RoleBindingRequest roleBindingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdPatchRequestBuilder(id, roleBindingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a role binding
   * 
   * @param id The id of record (required)
   * @param roleBindingRequest Updated role binding data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RoleBinding&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RoleBinding>> apiAccountsMgmtV1RoleBindingsIdPatchWithHttpInfo(String id, RoleBindingRequest roleBindingRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsIdPatchRequestBuilder(id, roleBindingRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RoleBinding>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RoleBindingsIdPatchRequestBuilder(String id, RoleBindingRequest roleBindingRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RoleBindingsIdPatch");
    }
    // verify the required parameter 'roleBindingRequest' is set
    if (roleBindingRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'roleBindingRequest' when calling apiAccountsMgmtV1RoleBindingsIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/role_bindings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(roleBindingRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new role binding
   * 
   * @param roleBindingCreateRequest Role binding data (required)
   * @return CompletableFuture&lt;RoleBinding&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RoleBinding> apiAccountsMgmtV1RoleBindingsPost(RoleBindingCreateRequest roleBindingCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsPostRequestBuilder(roleBindingCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new role binding
   * 
   * @param roleBindingCreateRequest Role binding data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;RoleBinding&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RoleBinding>> apiAccountsMgmtV1RoleBindingsPostWithHttpInfo(RoleBindingCreateRequest roleBindingCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RoleBindingsPostRequestBuilder(roleBindingCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RoleBindingsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RoleBinding>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleBinding>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RoleBindingsPostRequestBuilder(RoleBindingCreateRequest roleBindingCreateRequest) throws ApiException {
    // verify the required parameter 'roleBindingCreateRequest' is set
    if (roleBindingCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'roleBindingCreateRequest' when calling apiAccountsMgmtV1RoleBindingsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/role_bindings";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(roleBindingCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of roles
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;RoleList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RoleList> apiAccountsMgmtV1RolesGet(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RolesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RolesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of roles
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;RoleList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RoleList>> apiAccountsMgmtV1RolesGetWithHttpInfo(Integer page, Integer size, String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RolesGetRequestBuilder(page, size, search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RolesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<RoleList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RoleList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RolesGetRequestBuilder(Integer page, Integer size, String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/roles";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a role by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;Role&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Role> apiAccountsMgmtV1RolesIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RolesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RolesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a role by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Role&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Role>> apiAccountsMgmtV1RolesIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1RolesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1RolesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Role>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Role>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1RolesIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1RolesIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/roles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create or renew the entitlement to support a product for the user&#39;s organization.
   * 
   * @param product The product for self_entitlement. The supported products are [rosa]. (required)
   * @return CompletableFuture&lt;SelfEntitlementStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SelfEntitlementStatus> apiAccountsMgmtV1SelfEntitlementProductPost(String product) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SelfEntitlementProductPostRequestBuilder(product);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SelfEntitlementProductPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfEntitlementStatus>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create or renew the entitlement to support a product for the user&#39;s organization.
   * 
   * @param product The product for self_entitlement. The supported products are [rosa]. (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SelfEntitlementStatus&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SelfEntitlementStatus>> apiAccountsMgmtV1SelfEntitlementProductPostWithHttpInfo(String product) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SelfEntitlementProductPostRequestBuilder(product);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SelfEntitlementProductPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SelfEntitlementStatus>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfEntitlementStatus>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SelfEntitlementProductPostRequestBuilder(String product) throws ApiException {
    // verify the required parameter 'product' is set
    if (product == null) {
      throw new ApiException(400, "Missing the required parameter 'product' when calling apiAccountsMgmtV1SelfEntitlementProductPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/self_entitlement/{product}"
        .replace("{product}", ApiClient.urlEncode(product.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of UHC product SKU Rules
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;SkuRulesList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SkuRulesList> apiAccountsMgmtV1SkuRulesGet(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRulesList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of UHC product SKU Rules
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuRulesList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SkuRulesList>> apiAccountsMgmtV1SkuRulesGetWithHttpInfo(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuRulesList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRulesList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkuRulesGetRequestBuilder(String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/sku_rules";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a sku rule
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SkuRulesIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a sku rule
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SkuRulesIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkuRulesIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SkuRulesIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/sku_rules/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a sku rules by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;SkuRules&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SkuRules> apiAccountsMgmtV1SkuRulesIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a sku rules by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuRules&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SkuRules>> apiAccountsMgmtV1SkuRulesIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuRules>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkuRulesIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SkuRulesIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/sku_rules/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a sku rule
   * 
   * @param id The id of record (required)
   * @param skuRules Updated sku rule data (required)
   * @return CompletableFuture&lt;SkuRules&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SkuRules> apiAccountsMgmtV1SkuRulesIdPatch(String id, SkuRules skuRules) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdPatchRequestBuilder(id, skuRules);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a sku rule
   * 
   * @param id The id of record (required)
   * @param skuRules Updated sku rule data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuRules&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SkuRules>> apiAccountsMgmtV1SkuRulesIdPatchWithHttpInfo(String id, SkuRules skuRules) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesIdPatchRequestBuilder(id, skuRules);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuRules>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkuRulesIdPatchRequestBuilder(String id, SkuRules skuRules) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SkuRulesIdPatch");
    }
    // verify the required parameter 'skuRules' is set
    if (skuRules == null) {
      throw new ApiException(400, "Missing the required parameter 'skuRules' when calling apiAccountsMgmtV1SkuRulesIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/sku_rules/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(skuRules);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new sku rule
   * 
   * @param skuRules Sku rule data (required)
   * @return CompletableFuture&lt;SkuRules&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SkuRules> apiAccountsMgmtV1SkuRulesPost(SkuRules skuRules) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesPostRequestBuilder(skuRules);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new sku rule
   * 
   * @param skuRules Sku rule data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuRules&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SkuRules>> apiAccountsMgmtV1SkuRulesPostWithHttpInfo(SkuRules skuRules) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkuRulesPostRequestBuilder(skuRules);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkuRulesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuRules>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuRules>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkuRulesPostRequestBuilder(SkuRules skuRules) throws ApiException {
    // verify the required parameter 'skuRules' is set
    if (skuRules == null) {
      throw new ApiException(400, "Missing the required parameter 'skuRules' when calling apiAccountsMgmtV1SkuRulesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/sku_rules";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(skuRules);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of UHC product SKUs
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;SkuList&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<SkuList> apiAccountsMgmtV1SkusGet(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkusGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkusGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of UHC product SKUs
   * 
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SkuList&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ApiResponse<SkuList>> apiAccountsMgmtV1SkusGetWithHttpInfo(String search) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkusGetRequestBuilder(search);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkusGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SkuList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SkuList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkusGetRequestBuilder(String search) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/skus";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a sku by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;SKU&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<SKU> apiAccountsMgmtV1SkusIdGet(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkusIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkusIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a sku by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SKU&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ApiResponse<SKU>> apiAccountsMgmtV1SkusIdGetWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SkusIdGetRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SkusIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SKU>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SKU>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SkusIdGetRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SkusIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/skus/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of subscriptions
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param labels Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;SubscriptionList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SubscriptionList> apiAccountsMgmtV1SubscriptionsGet(Integer page, Integer size, String search, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, String fields, String orderBy, String labels) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsGetRequestBuilder(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of subscriptions
   * 
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param labels Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SubscriptionList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SubscriptionList>> apiAccountsMgmtV1SubscriptionsGetWithHttpInfo(Integer page, Integer size, String search, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, String fields, String orderBy, String labels) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsGetRequestBuilder(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SubscriptionList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsGetRequestBuilder(Integer page, Integer size, String search, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, String fields, String orderBy, String labels) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchAccounts", fetchAccounts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("labels", labels));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes a subscription by id
   * 
   * @param id The id of record (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsIdDelete(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Deletes a subscription by id
   * 
   * @param id The id of record (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsIdDeleteWithHttpInfo(String id) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdDeleteRequestBuilder(id);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdDeleteRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a subscription by id
   * 
   * @param id The id of record (required)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fetchCpuAndSocket If true, fetches, from the clusters service, the total numbers of CPU&#39;s and sockets under an obligation, and includes in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;Subscription&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Subscription> apiAccountsMgmtV1SubscriptionsIdGet(String id, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchCpuAndSocket) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdGetRequestBuilder(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a subscription by id
   * 
   * @param id The id of record (required)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @param fetchLabels If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. (optional)
   * @param fetchCapabilities If true, includes the capabilities on a subscription in the output. Could slow request response time. (optional)
   * @param fetchCpuAndSocket If true, fetches, from the clusters service, the total numbers of CPU&#39;s and sockets under an obligation, and includes in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Subscription&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Subscription>> apiAccountsMgmtV1SubscriptionsIdGetWithHttpInfo(String id, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchCpuAndSocket) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdGetRequestBuilder(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Subscription>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdGetRequestBuilder(String id, Boolean fetchAccounts, Boolean fetchLabels, Boolean fetchCapabilities, Boolean fetchCpuAndSocket) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchAccounts", fetchAccounts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchLabels", fetchLabels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCapabilities", fetchCapabilities));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchCpuAndSocket", fetchCpuAndSocket));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;LabelList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<LabelList> apiAccountsMgmtV1SubscriptionsIdLabelsGet(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of labels
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;LabelList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<LabelList>> apiAccountsMgmtV1SubscriptionsIdLabelsGetWithHttpInfo(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<LabelList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LabelList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdLabelsGetRequestBuilder(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdLabelsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get subscription labels by label key
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1SubscriptionsIdLabelsKeyGetWithHttpInfo(String id, String key) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequestBuilder(id, key);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequestBuilder(String id, String key) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param key The key of the label (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchWithHttpInfo(String id, String key, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequestBuilder(id, key, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequestBuilder(String id, String key, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;Label&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Label> apiAccountsMgmtV1SubscriptionsIdLabelsPost(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new label or update an existing label
   * 
   * @param id The id of record (required)
   * @param label Label data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Label&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Label>> apiAccountsMgmtV1SubscriptionsIdLabelsPostWithHttpInfo(String id, Label label) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdLabelsPostRequestBuilder(id, label);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdLabelsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Label>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Label>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdLabelsPostRequestBuilder(String id, Label label) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdLabelsPost");
    }
    // verify the required parameter 'label' is set
    if (label == null) {
      throw new ApiException(400, "Missing the required parameter 'label' when calling apiAccountsMgmtV1SubscriptionsIdLabelsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/labels"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(label);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get subscription&#39;s metrics by metric name
   * 
   * @param id The id of record (required)
   * @param metricName The name of the metric (required)
   * @param search The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~&#39;managed.*&#39;,channel&#x3D;&#39;production&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the records will be returned. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;SubscriptionMetricList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SubscriptionMetricList> apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(String id, String metricName, String search, String fields) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGetRequestBuilder(id, metricName, search, fields);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionMetricList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get subscription&#39;s metrics by metric name
   * 
   * @param id The id of record (required)
   * @param metricName The name of the metric (required)
   * @param search The &#x60;search&#x60; paramter specifies the PromQL selector. The syntax is defined by Prometheus at https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors. It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection. For example, in order to retrieve subscription_sync_total with names starting with &#x60;managed&#x60; and with a channel &#x3D; &#x60;production&#x60;:  &#x60;&#x60;&#x60; name&#x3D;~&#39;managed.*&#39;,channel&#x3D;&#39;production&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the records will be returned. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SubscriptionMetricList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SubscriptionMetricList>> apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGetWithHttpInfo(String id, String metricName, String search, String fields) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGetRequestBuilder(id, metricName, search, fields);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SubscriptionMetricList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionMetricList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGetRequestBuilder(String id, String metricName, String search, String fields) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet");
    }
    // verify the required parameter 'metricName' is set
    if (metricName == null) {
      throw new ApiException(400, "Missing the required parameter 'metricName' when calling apiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/metrics/{metric_name}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{metric_name}", ApiClient.urlEncode(metricName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Notify the owner of a subscription
   * 
   * @param id The id of record (required)
   * @param notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsIdNotifyPost(String id, NotificationRequest notificationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdNotifyPostRequestBuilder(id, notificationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdNotifyPost", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Notify the owner of a subscription
   * 
   * @param id The id of record (required)
   * @param notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsIdNotifyPostWithHttpInfo(String id, NotificationRequest notificationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdNotifyPostRequestBuilder(id, notificationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdNotifyPost", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdNotifyPostRequestBuilder(String id, NotificationRequest notificationRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdNotifyPost");
    }
    // verify the required parameter 'notificationRequest' is set
    if (notificationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'notificationRequest' when calling apiAccountsMgmtV1SubscriptionsIdNotifyPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/notify"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(notificationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a subscription
   * 
   * @param id The id of record (required)
   * @param subscriptionPatchRequest Updated subscription data (required)
   * @return CompletableFuture&lt;Subscription&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Subscription> apiAccountsMgmtV1SubscriptionsIdPatch(String id, SubscriptionPatchRequest subscriptionPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdPatchRequestBuilder(id, subscriptionPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a subscription
   * 
   * @param id The id of record (required)
   * @param subscriptionPatchRequest Updated subscription data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Subscription&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Subscription>> apiAccountsMgmtV1SubscriptionsIdPatchWithHttpInfo(String id, SubscriptionPatchRequest subscriptionPatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdPatchRequestBuilder(id, subscriptionPatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Subscription>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdPatchRequestBuilder(String id, SubscriptionPatchRequest subscriptionPatchRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdPatch");
    }
    // verify the required parameter 'subscriptionPatchRequest' is set
    if (subscriptionPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionPatchRequest' when calling apiAccountsMgmtV1SubscriptionsIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(subscriptionPatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of reserved resources
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ReservedResourceList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ReservedResourceList> apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResourceList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of reserved resources
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ReservedResourceList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ReservedResourceList>> apiAccountsMgmtV1SubscriptionsIdReservedResourcesGetWithHttpInfo(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequestBuilder(id, page, size, search, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ReservedResourceList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResourceList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequestBuilder(String id, Integer page, Integer size, String search, String orderBy) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of open support creates opened against the external cluster id of this subscrption
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(String id, Integer page, Integer size) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequestBuilder(id, page, size);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdSupportCasesGet", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of open support creates opened against the external cluster id of this subscrption
   * 
   * @param id The id of record (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsIdSupportCasesGetWithHttpInfo(String id, Integer page, Integer size) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequestBuilder(id, page, size);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsIdSupportCasesGet", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequestBuilder(String id, Integer page, Integer size) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsIdSupportCasesGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{id}/support_cases"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new subscription
   * 
   * @param subscriptionCreateRequest Subscription Creation data (required)
   * @return CompletableFuture&lt;Subscription&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Subscription> apiAccountsMgmtV1SubscriptionsPost(SubscriptionCreateRequest subscriptionCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsPostRequestBuilder(subscriptionCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new subscription
   * 
   * @param subscriptionCreateRequest Subscription Creation data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Subscription&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Subscription>> apiAccountsMgmtV1SubscriptionsPostWithHttpInfo(SubscriptionCreateRequest subscriptionCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsPostRequestBuilder(subscriptionCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Subscription>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Subscription>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsPostRequestBuilder(SubscriptionCreateRequest subscriptionCreateRequest) throws ApiException {
    // verify the required parameter 'subscriptionCreateRequest' is set
    if (subscriptionCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionCreateRequest' when calling apiAccountsMgmtV1SubscriptionsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(subscriptionCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Deletes a notification contact by subscription and account id
   * 
   * @param subId The id of subscription (required)
   * @param accountId The id of account (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(String subId, String accountId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequestBuilder(subId, accountId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Deletes a notification contact by subscription and account id
   * 
   * @param subId The id of subscription (required)
   * @param accountId The id of account (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteWithHttpInfo(String subId, String accountId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequestBuilder(subId, accountId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequestBuilder(String subId, String accountId) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete");
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()))
        .replace("{accountId}", ApiClient.urlEncode(accountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of notification contacts for the given subscription
   * 
   * @param subId The id of subscription (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;AccountList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccountList> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(String subId, Integer page, Integer size, String search, String fields, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequestBuilder(subId, page, size, search, fields, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Returns a list of notification contacts for the given subscription
   * 
   * @param subId The id of subscription (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param fields Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60; (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;AccountList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccountList>> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetWithHttpInfo(String subId, Integer page, Integer size, String search, String fields, String orderBy) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequestBuilder(subId, page, size, search, fields, orderBy);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccountList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccountList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequestBuilder(String subId, Integer page, Integer size, String search, String fields, String orderBy) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fields", fields));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Add an account as a notification contact to this subscription
   * 
   * @param subId The id of subscription (required)
   * @param notificationContactCreateRequest Add a notification contact by an account&#39;s username (required)
   * @return CompletableFuture&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Account> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(String subId, NotificationContactCreateRequest notificationContactCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequestBuilder(subId, notificationContactCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Add an account as a notification contact to this subscription
   * 
   * @param subId The id of subscription (required)
   * @param notificationContactCreateRequest Add a notification contact by an account&#39;s username (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Account&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Account>> apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostWithHttpInfo(String subId, NotificationContactCreateRequest notificationContactCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequestBuilder(subId, notificationContactCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<Account>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Account>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequestBuilder(String subId, NotificationContactCreateRequest notificationContactCreateRequest) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost");
    }
    // verify the required parameter 'notificationContactCreateRequest' is set
    if (notificationContactCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'notificationContactCreateRequest' when calling apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(notificationContactCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete reserved resources by id
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(String subId, String reservedResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDeleteRequestBuilder(subId, reservedResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete reserved resources by id
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDeleteWithHttpInfo(String subId, String reservedResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDeleteRequestBuilder(subId, reservedResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDeleteRequestBuilder(String subId, String reservedResourceId) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete");
    }
    // verify the required parameter 'reservedResourceId' is set
    if (reservedResourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'reservedResourceId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()))
        .replace("{reservedResourceId}", ApiClient.urlEncode(reservedResourceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get reserved resources by id
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @return CompletableFuture&lt;ReservedResource&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ReservedResource> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(String subId, String reservedResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequestBuilder(subId, reservedResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResource>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get reserved resources by id
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ReservedResource&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ReservedResource>> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetWithHttpInfo(String subId, String reservedResourceId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequestBuilder(subId, reservedResourceId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ReservedResource>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResource>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequestBuilder(String subId, String reservedResourceId) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet");
    }
    // verify the required parameter 'reservedResourceId' is set
    if (reservedResourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'reservedResourceId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()))
        .replace("{reservedResourceId}", ApiClient.urlEncode(reservedResourceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a reserved resource
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @param reservedResourcePatchRequest Updated reserved resource data (required)
   * @return CompletableFuture&lt;ReservedResource&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ReservedResource> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(String subId, String reservedResourceId, ReservedResourcePatchRequest reservedResourcePatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatchRequestBuilder(subId, reservedResourceId, reservedResourcePatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResource>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a reserved resource
   * 
   * @param subId The id of subscription (required)
   * @param reservedResourceId The id of reserved resource (required)
   * @param reservedResourcePatchRequest Updated reserved resource data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ReservedResource&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ReservedResource>> apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatchWithHttpInfo(String subId, String reservedResourceId, ReservedResourcePatchRequest reservedResourcePatchRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatchRequestBuilder(subId, reservedResourceId, reservedResourcePatchRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ReservedResource>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReservedResource>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatchRequestBuilder(String subId, String reservedResourceId, ReservedResourcePatchRequest reservedResourcePatchRequest) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch");
    }
    // verify the required parameter 'reservedResourceId' is set
    if (reservedResourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'reservedResourceId' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch");
    }
    // verify the required parameter 'reservedResourcePatchRequest' is set
    if (reservedResourcePatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'reservedResourcePatchRequest' when calling apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()))
        .replace("{reservedResourceId}", ApiClient.urlEncode(reservedResourceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reservedResourcePatchRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get subscription role bindings
   * 
   * @param subId The id of subscription (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;SubscriptionRoleBindingList&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SubscriptionRoleBindingList> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(String subId, Integer page, Integer size, String search, String orderBy, Boolean fetchAccounts) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGetRequestBuilder(subId, page, size, search, orderBy, fetchAccounts);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBindingList>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get subscription role bindings
   * 
   * @param subId The id of subscription (required)
   * @param page Page number of record list when record list exceeds specified page size (optional, default to 1)
   * @param size Maximum number of records to return (optional, default to 100)
   * @param search Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like &#39;my%&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; &#39;foo&#39; and labels.value &#x3D; &#39;bar&#39; &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned. (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then no explicit ordering will be applied. (optional)
   * @param fetchAccounts If true, includes the account reference information in the output. Could slow request response time. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SubscriptionRoleBindingList&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SubscriptionRoleBindingList>> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGetWithHttpInfo(String subId, Integer page, Integer size, String search, String orderBy, Boolean fetchAccounts) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGetRequestBuilder(subId, page, size, search, orderBy, fetchAccounts);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SubscriptionRoleBindingList>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBindingList>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGetRequestBuilder(String subId, Integer page, Integer size, String search, String orderBy, Boolean fetchAccounts) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fetchAccounts", fetchAccounts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a subscription role binding
   * 
   * @param id The id of record (required)
   * @param subId The id of subscription (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(String id, String subId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDeleteRequestBuilder(id, subId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a subscription role binding
   * 
   * @param id The id of record (required)
   * @param subId The id of subscription (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDeleteWithHttpInfo(String id, String subId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDeleteRequestBuilder(id, subId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDeleteRequestBuilder(String id, String subId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete");
    }
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a Subscription Role Binding by id
   * 
   * @param id The id of record (required)
   * @param subId The id of subscription (required)
   * @return CompletableFuture&lt;SubscriptionRoleBinding&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SubscriptionRoleBinding> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(String id, String subId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGetRequestBuilder(id, subId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBinding>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a Subscription Role Binding by id
   * 
   * @param id The id of record (required)
   * @param subId The id of subscription (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SubscriptionRoleBinding&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SubscriptionRoleBinding>> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGetWithHttpInfo(String id, String subId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGetRequestBuilder(id, subId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SubscriptionRoleBinding>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBinding>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGetRequestBuilder(String id, String subId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet");
    }
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new subscription role binding
   * 
   * @param subId The id of subscription (required)
   * @param subscriptionRoleBindingCreateRequest Subscription role binding data (required)
   * @return CompletableFuture&lt;SubscriptionRoleBinding&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SubscriptionRoleBinding> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(String subId, SubscriptionRoleBindingCreateRequest subscriptionRoleBindingCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPostRequestBuilder(subId, subscriptionRoleBindingCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBinding>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new subscription role binding
   * 
   * @param subId The id of subscription (required)
   * @param subscriptionRoleBindingCreateRequest Subscription role binding data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SubscriptionRoleBinding&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SubscriptionRoleBinding>> apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPostWithHttpInfo(String subId, SubscriptionRoleBindingCreateRequest subscriptionRoleBindingCreateRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPostRequestBuilder(subId, subscriptionRoleBindingCreateRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SubscriptionRoleBinding>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionRoleBinding>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPostRequestBuilder(String subId, SubscriptionRoleBindingCreateRequest subscriptionRoleBindingCreateRequest) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost");
    }
    // verify the required parameter 'subscriptionRoleBindingCreateRequest' is set
    if (subscriptionRoleBindingCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionRoleBindingCreateRequest' when calling apiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(subscriptionRoleBindingCreateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a support case
   * 
   * @param caseId The id of a support case (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiAccountsMgmtV1SupportCasesCaseIdDelete(String caseId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SupportCasesCaseIdDeleteRequestBuilder(caseId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SupportCasesCaseIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a support case
   * 
   * @param caseId The id of a support case (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> apiAccountsMgmtV1SupportCasesCaseIdDeleteWithHttpInfo(String caseId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SupportCasesCaseIdDeleteRequestBuilder(caseId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SupportCasesCaseIdDelete", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SupportCasesCaseIdDeleteRequestBuilder(String caseId) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(400, "Missing the required parameter 'caseId' when calling apiAccountsMgmtV1SupportCasesCaseIdDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/support_cases/{caseId}"
        .replace("{caseId}", ApiClient.urlEncode(caseId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * create a support case for the subscription
   * 
   * @param supportCasesRequest The contents of the support case to be created (required)
   * @return CompletableFuture&lt;SupportCasesCreatedResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SupportCasesCreatedResponse> apiAccountsMgmtV1SupportCasesPost(SupportCasesRequest supportCasesRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SupportCasesPostRequestBuilder(supportCasesRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SupportCasesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SupportCasesCreatedResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * create a support case for the subscription
   * 
   * @param supportCasesRequest The contents of the support case to be created (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SupportCasesCreatedResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SupportCasesCreatedResponse>> apiAccountsMgmtV1SupportCasesPostWithHttpInfo(SupportCasesRequest supportCasesRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1SupportCasesPostRequestBuilder(supportCasesRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1SupportCasesPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SupportCasesCreatedResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SupportCasesCreatedResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1SupportCasesPostRequestBuilder(SupportCasesRequest supportCasesRequest) throws ApiException {
    // verify the required parameter 'supportCasesRequest' is set
    if (supportCasesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'supportCasesRequest' when calling apiAccountsMgmtV1SupportCasesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/support_cases";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(supportCasesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Finds the account owner of the provided token
   * 
   * @param tokenAuthorizationRequest Token authorization data (required)
   * @return CompletableFuture&lt;TokenAuthorizationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<TokenAuthorizationResponse> apiAccountsMgmtV1TokenAuthorizationPost(TokenAuthorizationRequest tokenAuthorizationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1TokenAuthorizationPostRequestBuilder(tokenAuthorizationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1TokenAuthorizationPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TokenAuthorizationResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Finds the account owner of the provided token
   * 
   * @param tokenAuthorizationRequest Token authorization data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;TokenAuthorizationResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<TokenAuthorizationResponse>> apiAccountsMgmtV1TokenAuthorizationPostWithHttpInfo(TokenAuthorizationRequest tokenAuthorizationRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAccountsMgmtV1TokenAuthorizationPostRequestBuilder(tokenAuthorizationRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAccountsMgmtV1TokenAuthorizationPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<TokenAuthorizationResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TokenAuthorizationResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAccountsMgmtV1TokenAuthorizationPostRequestBuilder(TokenAuthorizationRequest tokenAuthorizationRequest) throws ApiException {
    // verify the required parameter 'tokenAuthorizationRequest' is set
    if (tokenAuthorizationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenAuthorizationRequest' when calling apiAccountsMgmtV1TokenAuthorizationPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/accounts_mgmt/v1/token_authorization";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(tokenAuthorizationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review an account&#39;s access to perform an action on a particular resource or resource type
   * 
   * @param accessReview Access review data (required)
   * @return CompletableFuture&lt;AccessReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccessReviewResponse> apiAuthorizationsV1AccessReviewPost(AccessReview accessReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1AccessReviewPostRequestBuilder(accessReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1AccessReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review an account&#39;s access to perform an action on a particular resource or resource type
   * 
   * @param accessReview Access review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccessReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccessReviewResponse>> apiAuthorizationsV1AccessReviewPostWithHttpInfo(AccessReview accessReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1AccessReviewPostRequestBuilder(accessReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1AccessReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccessReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1AccessReviewPostRequestBuilder(AccessReview accessReview) throws ApiException {
    // verify the required parameter 'accessReview' is set
    if (accessReview == null) {
      throw new ApiException(400, "Missing the required parameter 'accessReview' when calling apiAuthorizationsV1AccessReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/access_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(accessReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review an account&#39;s capabilities
   * 
   * @param capabilityReviewRequest Capability review data (required)
   * @return CompletableFuture&lt;CapabilityReview&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<CapabilityReview> apiAuthorizationsV1CapabilityReviewPost(CapabilityReviewRequest capabilityReviewRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1CapabilityReviewPostRequestBuilder(capabilityReviewRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1CapabilityReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CapabilityReview>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review an account&#39;s capabilities
   * 
   * @param capabilityReviewRequest Capability review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;CapabilityReview&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<CapabilityReview>> apiAuthorizationsV1CapabilityReviewPostWithHttpInfo(CapabilityReviewRequest capabilityReviewRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1CapabilityReviewPostRequestBuilder(capabilityReviewRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1CapabilityReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<CapabilityReview>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CapabilityReview>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1CapabilityReviewPostRequestBuilder(CapabilityReviewRequest capabilityReviewRequest) throws ApiException {
    // verify the required parameter 'capabilityReviewRequest' is set
    if (capabilityReviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'capabilityReviewRequest' when calling apiAuthorizationsV1CapabilityReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/capability_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(capabilityReviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
   * 
   * @param exportControlReviewRequest Export control review data (required)
   * @return CompletableFuture&lt;ExportControlReview&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ExportControlReview> apiAuthorizationsV1ExportControlReviewPost(ExportControlReviewRequest exportControlReviewRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1ExportControlReviewPostRequestBuilder(exportControlReviewRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1ExportControlReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportControlReview>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
   * 
   * @param exportControlReviewRequest Export control review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ExportControlReview&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ExportControlReview>> apiAuthorizationsV1ExportControlReviewPostWithHttpInfo(ExportControlReviewRequest exportControlReviewRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1ExportControlReviewPostRequestBuilder(exportControlReviewRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1ExportControlReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ExportControlReview>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportControlReview>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1ExportControlReviewPostRequestBuilder(ExportControlReviewRequest exportControlReviewRequest) throws ApiException {
    // verify the required parameter 'exportControlReviewRequest' is set
    if (exportControlReviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'exportControlReviewRequest' when calling apiAuthorizationsV1ExportControlReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/export_control_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportControlReviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review feature to perform an action on it such as toggle a feature on/off
   * 
   * @param featureReview Feature review data (required)
   * @return CompletableFuture&lt;FeatureReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<FeatureReviewResponse> apiAuthorizationsV1FeatureReviewPost(FeatureReview featureReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1FeatureReviewPostRequestBuilder(featureReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1FeatureReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review feature to perform an action on it such as toggle a feature on/off
   * 
   * @param featureReview Feature review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;FeatureReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<FeatureReviewResponse>> apiAuthorizationsV1FeatureReviewPostWithHttpInfo(FeatureReview featureReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1FeatureReviewPostRequestBuilder(featureReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1FeatureReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<FeatureReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1FeatureReviewPostRequestBuilder(FeatureReview featureReview) throws ApiException {
    // verify the required parameter 'featureReview' is set
    if (featureReview == null) {
      throw new ApiException(400, "Missing the required parameter 'featureReview' when calling apiAuthorizationsV1FeatureReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/feature_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(featureReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\&quot;*\&quot;] is shorthand for all ids.
   * 
   * @param resourceReviewRequest Resource review data (required)
   * @param reduceClusterList If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. (optional)
   * @return CompletableFuture&lt;ResourceReview&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResourceReview> apiAuthorizationsV1ResourceReviewPost(ResourceReviewRequest resourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1ResourceReviewPostRequestBuilder(resourceReviewRequest, reduceClusterList);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1ResourceReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceReview>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\&quot;*\&quot;] is shorthand for all ids.
   * 
   * @param resourceReviewRequest Resource review data (required)
   * @param reduceClusterList If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ResourceReview&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ApiResponse<ResourceReview>> apiAuthorizationsV1ResourceReviewPostWithHttpInfo(ResourceReviewRequest resourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1ResourceReviewPostRequestBuilder(resourceReviewRequest, reduceClusterList);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1ResourceReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ResourceReview>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResourceReview>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1ResourceReviewPostRequestBuilder(ResourceReviewRequest resourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    // verify the required parameter 'resourceReviewRequest' is set
    if (resourceReviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'resourceReviewRequest' when calling apiAuthorizationsV1ResourceReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/resource_review";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("reduceClusterList", reduceClusterList));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(resourceReviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review your ability to perform an action on a particular resource or resource type
   * 
   * @param selfAccessReview Self access review data (required)
   * @return CompletableFuture&lt;AccessReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<AccessReviewResponse> apiAuthorizationsV1SelfAccessReviewPost(SelfAccessReview selfAccessReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfAccessReviewPostRequestBuilder(selfAccessReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfAccessReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review your ability to perform an action on a particular resource or resource type
   * 
   * @param selfAccessReview Self access review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;AccessReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<AccessReviewResponse>> apiAuthorizationsV1SelfAccessReviewPostWithHttpInfo(SelfAccessReview selfAccessReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfAccessReviewPostRequestBuilder(selfAccessReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfAccessReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<AccessReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AccessReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1SelfAccessReviewPostRequestBuilder(SelfAccessReview selfAccessReview) throws ApiException {
    // verify the required parameter 'selfAccessReview' is set
    if (selfAccessReview == null) {
      throw new ApiException(400, "Missing the required parameter 'selfAccessReview' when calling apiAuthorizationsV1SelfAccessReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/self_access_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selfAccessReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review your ability to toggle a feature
   * 
   * @param selfFeatureReview Self feature review data (required)
   * @return CompletableFuture&lt;FeatureReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<FeatureReviewResponse> apiAuthorizationsV1SelfFeatureReviewPost(SelfFeatureReview selfFeatureReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfFeatureReviewPostRequestBuilder(selfFeatureReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfFeatureReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review your ability to toggle a feature
   * 
   * @param selfFeatureReview Self feature review data (required)
   * @return CompletableFuture&lt;ApiResponse&lt;FeatureReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<FeatureReviewResponse>> apiAuthorizationsV1SelfFeatureReviewPostWithHttpInfo(SelfFeatureReview selfFeatureReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfFeatureReviewPostRequestBuilder(selfFeatureReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfFeatureReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<FeatureReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FeatureReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1SelfFeatureReviewPostRequestBuilder(SelfFeatureReview selfFeatureReview) throws ApiException {
    // verify the required parameter 'selfFeatureReview' is set
    if (selfFeatureReview == null) {
      throw new ApiException(400, "Missing the required parameter 'selfFeatureReview' when calling apiAuthorizationsV1SelfFeatureReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/self_feature_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selfFeatureReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\&quot;*\&quot;] is shorthand for all ids.
   * 
   * @param selfResourceReviewRequest Self resource review data (required)
   * @param reduceClusterList If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. (optional)
   * @return CompletableFuture&lt;SelfResourceReview&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SelfResourceReview> apiAuthorizationsV1SelfResourceReviewPost(SelfResourceReviewRequest selfResourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfResourceReviewPostRequestBuilder(selfResourceReviewRequest, reduceClusterList);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfResourceReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfResourceReview>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\&quot;*\&quot;] is shorthand for all ids.
   * 
   * @param selfResourceReviewRequest Self resource review data (required)
   * @param reduceClusterList If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;SelfResourceReview&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SelfResourceReview>> apiAuthorizationsV1SelfResourceReviewPostWithHttpInfo(SelfResourceReviewRequest selfResourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfResourceReviewPostRequestBuilder(selfResourceReviewRequest, reduceClusterList);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfResourceReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<SelfResourceReview>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SelfResourceReview>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1SelfResourceReviewPostRequestBuilder(SelfResourceReviewRequest selfResourceReviewRequest, Boolean reduceClusterList) throws ApiException {
    // verify the required parameter 'selfResourceReviewRequest' is set
    if (selfResourceReviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'selfResourceReviewRequest' when calling apiAuthorizationsV1SelfResourceReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/self_resource_review";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("reduceClusterList", reduceClusterList));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selfResourceReviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review your status of Terms
   * 
   * @param selfTermsReview Data to check self terms for (required)
   * @return CompletableFuture&lt;TermsReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<TermsReviewResponse> apiAuthorizationsV1SelfTermsReviewPost(SelfTermsReview selfTermsReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfTermsReviewPostRequestBuilder(selfTermsReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfTermsReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TermsReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review your status of Terms
   * 
   * @param selfTermsReview Data to check self terms for (required)
   * @return CompletableFuture&lt;ApiResponse&lt;TermsReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<TermsReviewResponse>> apiAuthorizationsV1SelfTermsReviewPostWithHttpInfo(SelfTermsReview selfTermsReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1SelfTermsReviewPostRequestBuilder(selfTermsReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1SelfTermsReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<TermsReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TermsReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1SelfTermsReviewPostRequestBuilder(SelfTermsReview selfTermsReview) throws ApiException {
    // verify the required parameter 'selfTermsReview' is set
    if (selfTermsReview == null) {
      throw new ApiException(400, "Missing the required parameter 'selfTermsReview' when calling apiAuthorizationsV1SelfTermsReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/self_terms_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selfTermsReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Review an account&#39;s status of Terms
   * 
   * @param termsReview Data to check terms for (required)
   * @return CompletableFuture&lt;TermsReviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<TermsReviewResponse> apiAuthorizationsV1TermsReviewPost(TermsReview termsReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1TermsReviewPostRequestBuilder(termsReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1TermsReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TermsReviewResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Review an account&#39;s status of Terms
   * 
   * @param termsReview Data to check terms for (required)
   * @return CompletableFuture&lt;ApiResponse&lt;TermsReviewResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<TermsReviewResponse>> apiAuthorizationsV1TermsReviewPostWithHttpInfo(TermsReview termsReview) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = apiAuthorizationsV1TermsReviewPostRequestBuilder(termsReview);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("apiAuthorizationsV1TermsReviewPost", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<TermsReviewResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TermsReviewResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder apiAuthorizationsV1TermsReviewPostRequestBuilder(TermsReview termsReview) throws ApiException {
    // verify the required parameter 'termsReview' is set
    if (termsReview == null) {
      throw new ApiException(400, "Missing the required parameter 'termsReview' when calling apiAuthorizationsV1TermsReviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/authorizations/v1/terms_review";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(termsReview);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
